
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(edgeR)
Loading required package: limma
> options(warnPartialMatchArgs=TRUE,warnPartialMatchAttr=TRUE,warnPartialMatchDollar=TRUE)
> 
> set.seed(0); u <- runif(100)
> 
> # generate raw counts from NB, create list object
> y <- matrix(rnbinom(80,size=5,mu=10),nrow=20)
> y <- rbind(0,c(0,0,2,2),y)
> rownames(y) <- paste("Tag",1:nrow(y),sep=".")
> d <- DGEList(counts=y,group=rep(1:2,each=2),lib.size=1001:1004)
> 
> filterByExpr(d)
 Tag.1  Tag.2  Tag.3  Tag.4  Tag.5  Tag.6  Tag.7  Tag.8  Tag.9 Tag.10 Tag.11 
 FALSE  FALSE  FALSE   TRUE  FALSE  FALSE   TRUE  FALSE  FALSE   TRUE   TRUE 
Tag.12 Tag.13 Tag.14 Tag.15 Tag.16 Tag.17 Tag.18 Tag.19 Tag.20 Tag.21 Tag.22 
  TRUE   TRUE  FALSE  FALSE   TRUE   TRUE  FALSE  FALSE   TRUE   TRUE   TRUE 
> 
> # estimate common dispersion and find differences in expression
> d <- estimateCommonDisp(d)
> d$common.dispersion
[1] 0.210292
> de <- exactTest(d)
> summary(de$table)
     logFC             logCPM          PValue       
 Min.   :-1.7266   Min.   :10.96   Min.   :0.01976  
 1st Qu.:-0.4855   1st Qu.:13.21   1st Qu.:0.33120  
 Median : 0.2253   Median :13.37   Median :0.56514  
 Mean   : 0.1877   Mean   :13.26   Mean   :0.54504  
 3rd Qu.: 0.5258   3rd Qu.:13.70   3rd Qu.:0.81052  
 Max.   : 4.0861   Max.   :14.31   Max.   :1.00000  
> topTags(de)
Comparison of groups:  2-1 
            logFC   logCPM     PValue       FDR
Tag.17  2.0450964 13.73726 0.01975954 0.4347099
Tag.21 -1.7265870 13.38327 0.06131012 0.6744114
Tag.6  -1.6329986 12.81479 0.12446044 0.8982100
Tag.2   4.0861092 11.54121 0.16331090 0.8982100
Tag.16  0.9324996 13.57074 0.29050785 0.9655885
Tag.20  0.8543138 13.76364 0.31736609 0.9655885
Tag.12  0.7081170 14.31389 0.37271028 0.9655885
Tag.19 -0.7976602 13.31405 0.40166354 0.9655885
Tag.3  -0.7300410 13.54155 0.42139935 0.9655885
Tag.8  -0.7917906 12.86353 0.47117217 0.9655885
> 
> d2 <- estimateTagwiseDisp(d,trend="none",prior.df=20)
> summary(d2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1757  0.1896  0.1989  0.2063  0.2185  0.2677 
> de <- exactTest(d2,dispersion="common")
> topTags(de)
Comparison of groups:  2-1 
            logFC   logCPM     PValue       FDR
Tag.17  2.0450964 13.73726 0.01975954 0.4347099
Tag.21 -1.7265870 13.38327 0.06131012 0.6744114
Tag.6  -1.6329986 12.81479 0.12446044 0.8982100
Tag.2   4.0861092 11.54121 0.16331090 0.8982100
Tag.16  0.9324996 13.57074 0.29050785 0.9655885
Tag.20  0.8543138 13.76364 0.31736609 0.9655885
Tag.12  0.7081170 14.31389 0.37271028 0.9655885
Tag.19 -0.7976602 13.31405 0.40166354 0.9655885
Tag.3  -0.7300410 13.54155 0.42139935 0.9655885
Tag.8  -0.7917906 12.86353 0.47117217 0.9655885
> 
> de <- exactTest(d2)
> topTags(de)
Comparison of groups:  2-1 
            logFC   logCPM     PValue       FDR
Tag.17  2.0450987 13.73726 0.01327001 0.2919403
Tag.21 -1.7265897 13.38327 0.05683886 0.6252275
Tag.6  -1.6329910 12.81479 0.11460208 0.8404152
Tag.2   4.0861092 11.54121 0.16126207 0.8869414
Tag.16  0.9324975 13.57074 0.28103256 0.9669238
Tag.20  0.8543178 13.76364 0.30234789 0.9669238
Tag.12  0.7081149 14.31389 0.37917895 0.9669238
Tag.19 -0.7976633 13.31405 0.40762735 0.9669238
Tag.3  -0.7300478 13.54155 0.40856822 0.9669238
Tag.8  -0.7918243 12.86353 0.49005179 0.9669238
> 
> d2 <- estimateTagwiseDisp(d,trend="movingave",span=0.4,prior.df=20)
> summary(d2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1005  0.1629  0.2064  0.2077  0.2585  0.3164 
> de <- exactTest(d2)
> topTags(de)
Comparison of groups:  2-1 
            logFC   logCPM     PValue       FDR
Tag.17  2.0450951 13.73726 0.02427872 0.5341319
Tag.21 -1.7265927 13.38327 0.05234833 0.5758316
Tag.6  -1.6330014 12.81479 0.12846308 0.8954397
Tag.2   4.0861092 11.54121 0.16280722 0.8954397
Tag.16  0.9324887 13.57074 0.24308201 0.9711975
Tag.20  0.8543044 13.76364 0.35534649 0.9711975
Tag.19 -0.7976535 13.31405 0.38873717 0.9711975
Tag.3  -0.7300525 13.54155 0.40001438 0.9711975
Tag.12  0.7080985 14.31389 0.43530227 0.9711975
Tag.8  -0.7918376 12.86353 0.49782701 0.9711975
> 
> summary(exactTest(d2,rejection.region="smallp")$table$PValue)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.02428 0.36369 0.55662 0.54319 0.78889 1.00000 
> summary(exactTest(d2,rejection.region="deviance")$table$PValue)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.02428 0.36369 0.55662 0.54319 0.78889 1.00000 
> 
> d2 <- estimateTagwiseDisp(d,trend="loess",span=0.8,prior.df=20)
> summary(d2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1165  0.1449  0.1832  0.1848  0.2116  0.2825 
> de <- exactTest(d2)
> topTags(de)
Comparison of groups:  2-1 
            logFC   logCPM     PValue       FDR
Tag.17  2.0450979 13.73726 0.01546795 0.3402949
Tag.21 -1.7266049 13.38327 0.03545446 0.3899990
Tag.6  -1.6329841 12.81479 0.10632987 0.7797524
Tag.2   4.0861092 11.54121 0.16057893 0.8831841
Tag.16  0.9324935 13.57074 0.26348818 0.9658389
Tag.20  0.8543140 13.76364 0.31674090 0.9658389
Tag.19 -0.7976354 13.31405 0.35564858 0.9658389
Tag.3  -0.7300593 13.54155 0.38833737 0.9658389
Tag.12  0.7081041 14.31389 0.41513004 0.9658389
Tag.8  -0.7918152 12.86353 0.48483449 0.9658389
> 
> d2 <- estimateTagwiseDisp(d,trend="tricube",span=0.8,prior.df=20)
> summary(d2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1165  0.1449  0.1832  0.1848  0.2116  0.2825 
> de <- exactTest(d2)
> topTags(de)
Comparison of groups:  2-1 
            logFC   logCPM     PValue       FDR
Tag.17  2.0450979 13.73726 0.01546795 0.3402949
Tag.21 -1.7266049 13.38327 0.03545446 0.3899990
Tag.6  -1.6329841 12.81479 0.10632987 0.7797524
Tag.2   4.0861092 11.54121 0.16057893 0.8831841
Tag.16  0.9324935 13.57074 0.26348818 0.9658389
Tag.20  0.8543140 13.76364 0.31674090 0.9658389
Tag.19 -0.7976354 13.31405 0.35564858 0.9658389
Tag.3  -0.7300593 13.54155 0.38833737 0.9658389
Tag.12  0.7081041 14.31389 0.41513004 0.9658389
Tag.8  -0.7918152 12.86353 0.48483449 0.9658389
> 
> # mglmOneWay
> design <- model.matrix(~group,data=d$samples)
> mglmOneWay(d[1:10,],design,dispersion=0.2)
$coefficients
         (Intercept)        group2
Tag.1  -1.000000e+08  0.000000e+00
Tag.2  -1.000000e+08  1.000000e+08
Tag.3   2.525729e+00 -5.108256e-01
Tag.4   2.525729e+00  1.484200e-01
Tag.5   2.140066e+00 -1.941560e-01
Tag.6   2.079442e+00 -1.163151e+00
Tag.7   2.014903e+00  2.363888e-01
Tag.8   1.945910e+00 -5.596158e-01
Tag.9   1.504077e+00  2.006707e-01
Tag.10  2.302585e+00  2.623643e-01

$fitted.values
       Sample1 Sample2 Sample3 Sample4
Tag.1      0.0     0.0     0.0     0.0
Tag.2      0.0     0.0     2.0     2.0
Tag.3     12.5    12.5     7.5     7.5
Tag.4     12.5    12.5    14.5    14.5
Tag.5      8.5     8.5     7.0     7.0
Tag.6      8.0     8.0     2.5     2.5
Tag.7      7.5     7.5     9.5     9.5
Tag.8      7.0     7.0     4.0     4.0
Tag.9      4.5     4.5     5.5     5.5
Tag.10    10.0    10.0    13.0    13.0

> mglmOneWay(d[1:10,],design,dispersion=0)
$coefficients
         (Intercept)        group2
Tag.1  -1.000000e+08  0.000000e+00
Tag.2  -1.000000e+08  1.000000e+08
Tag.3   2.525729e+00 -5.108256e-01
Tag.4   2.525729e+00  1.484200e-01
Tag.5   2.140066e+00 -1.941560e-01
Tag.6   2.079442e+00 -1.163151e+00
Tag.7   2.014903e+00  2.363888e-01
Tag.8   1.945910e+00 -5.596158e-01
Tag.9   1.504077e+00  2.006707e-01
Tag.10  2.302585e+00  2.623643e-01

$fitted.values
       Sample1 Sample2 Sample3 Sample4
Tag.1      0.0     0.0     0.0     0.0
Tag.2      0.0     0.0     2.0     2.0
Tag.3     12.5    12.5     7.5     7.5
Tag.4     12.5    12.5    14.5    14.5
Tag.5      8.5     8.5     7.0     7.0
Tag.6      8.0     8.0     2.5     2.5
Tag.7      7.5     7.5     9.5     9.5
Tag.8      7.0     7.0     4.0     4.0
Tag.9      4.5     4.5     5.5     5.5
Tag.10    10.0    10.0    13.0    13.0

> 
> fit <- glmFit(d,design,dispersion=d$common.dispersion,prior.count=0.5/4)
> lrt <- glmLRT(fit,coef=2)
> topTags(lrt)
Coefficient:  group2 
            logFC   logCPM        LR     PValue       FDR
Tag.17  2.0450964 13.73726 6.0485417 0.01391779 0.3058698
Tag.2   4.0861092 11.54121 4.8400340 0.02780635 0.3058698
Tag.21 -1.7265870 13.38327 4.0777825 0.04345065 0.3186381
Tag.6  -1.6329986 12.81479 3.0078205 0.08286364 0.4557500
Tag.16  0.9324996 13.57074 1.3477682 0.24566867 0.8276702
Tag.20  0.8543138 13.76364 1.1890032 0.27553071 0.8276702
Tag.19 -0.7976602 13.31405 0.9279151 0.33540526 0.8276702
Tag.12  0.7081170 14.31389 0.9095513 0.34023349 0.8276702
Tag.3  -0.7300410 13.54155 0.8300307 0.36226364 0.8276702
Tag.8  -0.7917906 12.86353 0.7830377 0.37621371 0.8276702
> 
> fit <- glmFit(d,design,dispersion=d$common.dispersion,prior.count=0.5)
> summary(fit$coefficients)
  (Intercept)         group2        
 Min.   :-7.604   Min.   :-1.13681  
 1st Qu.:-4.895   1st Qu.:-0.32341  
 Median :-4.713   Median : 0.15083  
 Mean   :-4.940   Mean   : 0.07817  
 3rd Qu.:-4.524   3rd Qu.: 0.35163  
 Max.   :-4.107   Max.   : 1.60864  
> 
> fit <- glmFit(d,design,prior.count=0.5/4)
> lrt <- glmLRT(fit,coef=2)
> topTags(lrt)
Coefficient:  group2 
            logFC   logCPM        LR     PValue       FDR
Tag.17  2.0450964 13.73726 6.0485417 0.01391779 0.3058698
Tag.2   4.0861092 11.54121 4.8400340 0.02780635 0.3058698
Tag.21 -1.7265870 13.38327 4.0777825 0.04345065 0.3186381
Tag.6  -1.6329986 12.81479 3.0078205 0.08286364 0.4557500
Tag.16  0.9324996 13.57074 1.3477682 0.24566867 0.8276702
Tag.20  0.8543138 13.76364 1.1890032 0.27553071 0.8276702
Tag.19 -0.7976602 13.31405 0.9279151 0.33540526 0.8276702
Tag.12  0.7081170 14.31389 0.9095513 0.34023349 0.8276702
Tag.3  -0.7300410 13.54155 0.8300307 0.36226364 0.8276702
Tag.8  -0.7917906 12.86353 0.7830377 0.37621371 0.8276702
> 
> dglm <- estimateGLMCommonDisp(d,design)
> dglm$common.dispersion
[1] 0.2033282
> dglm <- estimateGLMTagwiseDisp(dglm,design,prior.df=20)
> summary(dglm$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1756  0.1879  0.1998  0.2031  0.2135  0.2578 
> fit <- glmFit(dglm,design,prior.count=0.5/4)
> lrt <- glmLRT(fit,coef=2)
> topTags(lrt)
Coefficient:  group2 
            logFC   logCPM        LR      PValue       FDR
Tag.17  2.0450988 13.73727 6.8001118 0.009115216 0.2005348
Tag.2   4.0861092 11.54122 4.8594088 0.027495756 0.2872068
Tag.21 -1.7265904 13.38327 4.2537154 0.039164558 0.2872068
Tag.6  -1.6329904 12.81479 3.1763761 0.074710253 0.4109064
Tag.16  0.9324970 13.57074 1.4126709 0.234613512 0.8499599
Tag.20  0.8543183 13.76364 1.2721097 0.259371274 0.8499599
Tag.19 -0.7976614 13.31405 0.9190392 0.337727381 0.8499599
Tag.12  0.7081163 14.31389 0.9014515 0.342392806 0.8499599
Tag.3  -0.7300488 13.54155 0.8817937 0.347710872 0.8499599
Tag.8  -0.7918166 12.86353 0.7356185 0.391068049 0.8603497
> dglm <- estimateGLMTrendedDisp(dglm,design)
> summary(dglm$trended.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1522  0.1676  0.1740  0.1887  0.2000  0.3469 
> dglm <- estimateGLMTrendedDisp(dglm,design,method="power")
> summary(dglm$trended.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1522  0.1676  0.1740  0.1887  0.2000  0.3469 
> dglm <- estimateGLMTrendedDisp(dglm,design,method="spline")
> summary(dglm$trended.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.09353 0.11082 0.15463 0.19006 0.23050 0.52006 
> dglm <- estimateGLMTrendedDisp(dglm,design,method="bin.spline")
> summary(dglm$trended.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1997  0.1997  0.1997  0.1997  0.1997  0.1997 
> dglm <- estimateGLMTagwiseDisp(dglm,design,prior.df=20)
> summary(dglm$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1385  0.1792  0.1964  0.1935  0.2026  0.2709 
> 
> dglm2 <- estimateDisp(dglm, design)
> summary(dglm2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1652  0.1740  0.1821  0.1852  0.1909  0.2259 
> dglm2 <- estimateDisp(dglm, design, prior.df=20)
> summary(dglm2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1527  0.1669  0.1814  0.1858  0.1951  0.2497 
> dglm2 <- estimateDisp(dglm, design, robust=TRUE)
> summary(dglm2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1652  0.1735  0.1822  0.1854  0.1905  0.2280 
> 
> # Continuous trend
> nlibs <- 3
> ntags <- 1000
> dispersion.true <- 0.1
> # Make first transcript respond to covariate x
> x <- 0:2
> design <- model.matrix(~x)
> beta.true <- cbind(Beta1=2,Beta2=c(2,rep(0,ntags-1)))
> mu.true <- 2^(beta.true %*% t(design))
> # Generate count data
> y <- rnbinom(ntags*nlibs,mu=mu.true,size=1/dispersion.true)
> y <- matrix(y,ntags,nlibs)
> colnames(y) <- c("x0","x1","x2")
> rownames(y) <- paste("Gene",1:ntags,sep="")
> d <- DGEList(y)
> d <- calcNormFactors(d,method="TMM")
> fit <- glmFit(d, design, dispersion=dispersion.true, prior.count=0.5/3)
> results <- glmLRT(fit, coef=2)
> topTags(results)
Coefficient:  x 
            logFC   logCPM        LR       PValue          FDR
Gene1    2.907024 13.56183 38.738512 4.845536e-10 4.845536e-07
Gene61   2.855317 10.27136 10.738307 1.049403e-03 5.247015e-01
Gene62  -2.123902 10.53174  8.818703 2.981585e-03 8.334760e-01
Gene134 -1.949073 10.53355  8.125889 4.363759e-03 8.334760e-01
Gene740 -1.610046 10.94907  8.013408 4.643227e-03 8.334760e-01
Gene354  2.022698 10.45066  7.826308 5.149118e-03 8.334760e-01
Gene5    1.856816 10.45249  7.214238 7.232750e-03 8.334760e-01
Gene746 -1.798331 10.53094  6.846262 8.882693e-03 8.334760e-01
Gene110  1.623148 10.68607  6.737984 9.438120e-03 8.334760e-01
Gene383  1.637140 10.75412  6.687530 9.708965e-03 8.334760e-01
> d1 <- estimateGLMCommonDisp(d, design, verbose=TRUE)
Disp = 0.10253 , BCV = 0.3202 
> glmFit(d,design,dispersion=dispersion.true, prior.count=0.5/3)
An object of class "DGEGLM"
$coefficients
      (Intercept)          x
Gene1   -7.391745  2.0149958
Gene2   -7.318483 -0.7611895
Gene3   -6.831702 -0.1399478
Gene4   -7.480255  0.5172002
Gene5   -8.747793  1.2870467
995 more rows ...

$fitted.values
             x0        x1          x2
Gene1 2.3570471 18.954454 138.2791328
Gene2 2.5138172  1.089292   0.4282107
Gene3 4.1580452  3.750528   3.0690081
Gene4 2.1012460  3.769592   6.1349937
Gene5 0.5080377  2.136398   8.1502486
995 more rows ...

$deviance
[1] 6.38037545 1.46644913 1.38532340 0.01593969 1.03894513
995 more elements ...

$iter
[1] 8 4 4 4 6
995 more elements ...

$failed
[1] FALSE FALSE FALSE FALSE FALSE
995 more elements ...

$method
[1] "levenberg"

$counts
      x0 x1  x2
Gene1  0 30 110
Gene2  2  2   0
Gene3  3  6   2
Gene4  2  4   6
Gene5  1  1   9
995 more rows ...

$unshrunk.coefficients
      (Intercept)          x
Gene1   -7.437763  2.0412762
Gene2   -7.373370 -0.8796273
Gene3   -6.870127 -0.1465014
Gene4   -7.552642  0.5410832
Gene5   -8.972372  1.3929679
995 more rows ...

$df.residual
[1] 1 1 1 1 1
995 more elements ...

$design
  (Intercept) x
1           1 0
2           1 1
3           1 2
attr(,"assign")
[1] 0 1

$offset
         [,1]     [,2]     [,3]
[1,] 8.295172 8.338525 8.284484
attr(,"class")
[1] "CompressedMatrix"
attr(,"Dims")
[1] 5 3
attr(,"repeat.row")
[1] TRUE
attr(,"repeat.col")
[1] FALSE
995 more rows ...

$dispersion
[1] 0.1

$prior.count
[1] 0.1666667

$samples
   group lib.size norm.factors
x0     1     4001    1.0008730
x1     1     4176    1.0014172
x2     1     3971    0.9977138

$AveLogCPM
[1] 13.561832  9.682757 10.447014 10.532113 10.452489
995 more elements ...

> 
> calcNormFactors(d$counts,method="TMMwsp")
       x0        x1        x2 
0.9992437 1.0077007 0.9931093 
> 
> d2 <- estimateDisp(d, design)
> summary(d2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.05545 0.09511 0.11623 0.11014 0.13329 0.16861 
> d2 <- estimateDisp(d, design, prior.df=20)
> summary(d2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.04203 0.08586 0.11280 0.11010 0.12369 0.37408 
> d2 <- estimateDisp(d, design, robust=TRUE)
> summary(d2$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.05545 0.09511 0.11623 0.11014 0.13329 0.16861 
> 
> # Exact tests
> y <- matrix(rnbinom(20,mu=10,size=3/2),5,4)
> group <- factor(c(1,1,2,2))
> ys <- splitIntoGroupsPseudo(y,group,pair=c(1,2))
> exactTestDoubleTail(ys$y1,ys$y2,dispersion=2/3)
[1] 0.1334396 0.6343568 0.7280015 0.7124912 0.3919258
> 
> y <- matrix(rnbinom(5*7,mu=10,size=3/2),5,7)
> group <- factor(c(1,1,2,2,3,3,3))
> ys <- splitIntoGroupsPseudo(y,group,pair=c(1,3))
> exactTestDoubleTail(ys$y1,ys$y2,dispersion=2/3)
[1] 1.0000000 0.4486382 1.0000000 0.9390317 0.4591241
> exactTestBetaApprox(ys$y1,ys$y2,dispersion=2/3)
[1] 1.0000000 0.4492969 1.0000000 0.9421695 0.4589194
> 
> y[1,3:4] <- 0
> design <- model.matrix(~group)
> fit <- glmFit(y,design,dispersion=2/3,prior.count=0.5/7)
> summary(fit$coefficients)
  (Intercept)         group2            group3        
 Min.   :-1.817   Min.   :-5.0171   Min.   :-0.64646  
 1st Qu.:-1.812   1st Qu.:-1.1565   1st Qu.:-0.13919  
 Median :-1.712   Median : 0.1994   Median :-0.10441  
 Mean   :-1.625   Mean   :-0.9523   Mean   :-0.04217  
 3rd Qu.:-1.429   3rd Qu.: 0.3755   3rd Qu.:-0.04305  
 Max.   :-1.356   Max.   : 0.8374   Max.   : 0.72227  
> 
> lrt <- glmLRT(fit,contrast=cbind(c(0,1,0),c(0,0,1)))
> topTags(lrt)
Coefficient:  LR test on 2 degrees of freedom 
     logFC.1    logFC.2   logCPM         LR      PValue        FDR
1 -7.2381060 -0.0621100 17.19071 10.7712171 0.004582051 0.02291026
5 -1.6684268 -0.9326507 17.33529  1.7309951 0.420842115 0.90967967
2  1.2080938  1.0420198 18.24544  1.0496688 0.591653347 0.90967967
4  0.5416704 -0.1506381 17.57744  0.3958596 0.820427427 0.90967967
3  0.2876249 -0.2008143 18.06216  0.1893255 0.909679672 0.90967967
> design <- model.matrix(~0+group)
> fit <- glmFit(y,design,dispersion=2/3,prior.count=0.5/7)
> lrt <- glmLRT(fit,contrast=cbind(c(-1,1,0),c(0,-1,1),c(-1,0,1)))
> topTags(lrt)
Coefficient:  LR test on 2 degrees of freedom 
     logFC.1    logFC.2    logFC.3   logCPM         LR      PValue        FDR
1 -7.2381060  7.1759960 -0.0621100 17.19071 10.7712171 0.004582051 0.02291026
5 -1.6684268  0.7357761 -0.9326507 17.33529  1.7309951 0.420842115 0.90967967
2  1.2080938 -0.1660740  1.0420198 18.24544  1.0496688 0.591653347 0.90967967
4  0.5416704 -0.6923084 -0.1506381 17.57744  0.3958596 0.820427427 0.90967967
3  0.2876249 -0.4884392 -0.2008143 18.06216  0.1893255 0.909679672 0.90967967
> 
> # simple Good-Turing algorithm runs.
> test1<-1:9
> freq1<-c(2018046, 449721, 188933, 105668, 68379, 48190, 35709, 37710, 22280)
> goodTuring(rep(test1, freq1))
$P0
[1] 0.3814719

$proportion
[1] 8.035111e-08 2.272143e-07 4.060582e-07 5.773690e-07 7.516705e-07
[6] 9.276808e-07 1.104759e-06 1.282549e-06 1.460837e-06

$count
[1] 1 2 3 4 5 6 7 8 9

$n
[1] 2018046  449721  188933  105668   68379   48190   35709   37710   22280

$n0
[1] 0

> test2<-c(312, 14491, 16401, 65124, 129797, 323321, 366051, 368599, 405261, 604962)
> goodTuring(test2)
$P0
[1] 0

$proportion
 [1] 0.0001362656 0.0063162959 0.0071487846 0.0283850925 0.0565733349
 [6] 0.1409223124 0.1595465235 0.1606570896 0.1766365144 0.2636777866

$count
 [1]    312  14491  16401  65124 129797 323321 366051 368599 405261 604962

$n
 [1] 1 1 1 1 1 1 1 1 1 1

$n0
[1] 0

> 
> 
> 
> proc.time()
   user  system elapsed 
   2.14    0.20    2.32 
